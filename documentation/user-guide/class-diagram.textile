---
layout: article
title: Class Diagram
subtitle: user guide
relativePath: ..
---

!{{ page.relativePath }}/images/features/agency_pics/entities.jpg!

h1. Importing primitive types

The contextual menu @Import primitive types@ can import predefined types libraries from a *right-click* on the background of a class diagram. This menu allows to import primitives for :
* UML 
* Java
* XML
* Ecore

Then, the imported types can be used in the property's definition.

Another way to import primitive types is just by editing a property on a class (by typing directly on the selected property or by hitting F2) and type the wanted datatype. If it's a known type, as String for example, the corresponding library is automatically imported : this library is visible in the model explorer when the project dependencies entry is expanded.
The case is not taken into account, so it is possible to type "string" and the "String" datatype of UML Primitive types library will be used.

h1. Creating Elements

All the elements you can create in a class diagram are available through the *palette*.

!{{ page.relativePath }}/images/using_class_diagram/palette.png!

You also have the ability to create elements in a contextual way related to the currently selected elements.
If your pointer is on the diagram background, after a few seconds you should see the following assistant :

!{{ page.relativePath }}/images/using_class_diagram/assistant.png!

If your pointer is *on a class* the assistant will be : 

!{{ page.relativePath }}/images/using_class_diagram/assistant_class.png!

h1. Editing Elements

h2. Generality

The generic way to edit element values is using the *properties view*. If it is not opened yet
you can open it clicking on the *Window* menu, then *Show View*  and then *Properties*

!{{ page.relativePath }}/images/using_class_diagram/properties.png! 

To edit a property you should then enable the *Semantic* tab :

!{{ page.relativePath }}/images/using_class_diagram/properties_values.png!

h2. Generic Class

To define a Generic Class, use the direct edit tool:

!{{ page.relativePath }}/images/using_class_diagram/generic_class.png!

To define a Binding, use the create edge tool called "Binding" from a Class to a Generic Class.
You may notice that "?" refers to an undefined actual type:

!{{ page.relativePath }}/images/using_class_diagram/binding1_class.png!

To specify the binding association from the formal to the actual type use also the direct edit tool:

!{{ page.relativePath }}/images/using_class_diagram/binding2_class.png!




h1. Using UML in colors

"UML in colors":http://en.wikipedia.org/wiki/UML_colors is an object modeling technique proposed by "Peter Coad":http://www.step-10.com/SoftwareDesign/ModellingInColour/index.html, Eric Lefebvre, and Jeff De Luca in a series of articles in 1999.
!{{ page.relativePath }}/images/uml_in_colors/example.png!
An @Archetypes@ layer is available in the UML Designer @class diagram@.
!{{ page.relativePath }}/images/uml_in_colors/layer.png!

When the layer is selected, new tools are available in the palette :
!{{ page.relativePath }}/images/uml_in_colors/palette.png!

The modeling in color patterns and strategies are built around the idea of class archetypes.
!http://www.step-10.com/SoftwareDesign/ModellingInColour/images/FourArchetypesWithContentSideBySide.gif!
It exists four different kind of archetypes :
* *moment-interval* and *mi-detail* (pink): represents a moment or interval of time, all things that happen in the software.
* *role* (yellow): represents something/someone who participates to moment-intervals.  
* *description* (blue): represents a collection of values a kind of catalog.
* *party, place, or thing* (green): represents someone or something that plays a role.

The Domain Neutral Component (DNC) is the common pattern applied with the UML in colors technique.
!http://www.step-10.com/SoftwareDesign/ModellingInColour/images/DNC.gif!

To create an archetype in a class diagram just select an archetype from the palette of the tooltip.
The archetypes are stored in UML model as stereotyped classes.
To change an existing class to an archetype just selects the tool from the palette and the existing class. The stereotype of the selected archetype is applied on the class which is colored.

UML in colors examples are available from Eclipse menu File > New > Example... > UML > Uml in colors.

For more detailed explanation on UML in colors have a look to "Peter Coad's website":http://www.step-10.com/SoftwareDesign/ModellingInColour/index.html.

h1. Editing Attributes

We added a few accelerators so that you can quickly edit *Attributes* in a class just by typing the label. Typing : 
* @aNewName@ will update the attribute name.
* @aNewName : SomeType@ will update the attribute name and will look for the *datatype* with the given name. If found it will 
* @/someName@ will set the Attribute as *derived*.
* @=someValue@ will set the *default value* of the Attribute. 
* @[0..1]@ will set the *multiplicity* of the attribute to 0 for the lower bound and 1 for the upper bound.
* @[0..*]@ will set the *multiplicity* of the attribute to 0 for the lower bound and unbounded for the upper bound.

h1. Classes in SubComponents

A *Class Diagram* created on a Package or a Model will display the contained classes but also the classes which are contained in Components of the selected Package.

Thanks to this one can easily define a *Class Diagram* displaying all the entities abstracting the fact that they might be split across components.

h1. Support for Broken Associations

It might happen that for some reason you have an *Association* instance in your package which doesn't have the proper *ends*. In that case
the class diagram will show the broken associations as nodes :

!{{ page.relativePath }}/images/features/class_pics/broken associations Class Diagram.jpg!

You can use the *Association* tools in the palette __(Association, Reference, Composition and Aggregation)__ to re-attach the Association to a classifier.