Document {
	Chapter Functional {
		Section Context {
			The UML Designer is a graphical designer compatible with the 
			"UML2 specification":http://www.omg.org/spec/UML/2.4.1/and based on "Obeo Designer":http://www.obeodesigner.com/.
			UML 2.2 has 14 types of diagrams divided into two categories:
			!images/UML_diagrams_overview.svg.png!
			

			It is released as Eclipse plugins under the EPL License.
			The source code is available on "github":https://github.com/ObeoNetwork/UML-Modeling
		}

		Section System purpose {
			The UML Designer will not cover all the diagrams described in the UML Standard. It is mainly focused on the more used diagrams (Class diagrams, Use Case diagram...) and try to provide a user friendly GUI.
			The intent is also to provide an easy way to make the transition from UML to domain specific modeling. This way users can continue to manipulate legacy UML models and start working with DSL. Users can even re-use the provided representations and work in a total transparence on both UML and DSL models at the same time.
		}

		Section Key Functions {
			The UML Designer provides two kinds of viewpoints :

			* UML Structural Modeling
			* UML Behavioral Modeling
			

			

			Section Structure diagrams {
				The structural diagrams are used to describe the structure of a software system.

				Section Class diagram {
					The class diagram is used to describe the structure of the system by showing the classes, the interfaces, their attributes, their operations and their relationships.
				}

				Section Component diagram {
					The component diagram is used to describe the structure of the system by showing the components and their connectors.
				}

				Section Composite structure diagram {
					The composite structure diagram is used to describe the structure of the system by showing the internal structure of classes and the interfaces they used to collaborate.
				}

				Section Deployment diagram {
					The deployment diagram is used to describe the structure of the system by showing the physical deployment of artifacts on nodes.
				}

				Section Package diagram {
					The package diagram is used to describe the structure of the system by showing the packages and their dependencies.
				}

				Section Object diagram {
					The object diagram is used to describe the structure of the system by showing the objects at a specific time.
				}

				Section Profile diagram {
					The profile diagram operates at the metamodel level to provide new stereotypes and profiles.
				}
			}

			Section Behavior diagrams {
				The behavioral diagrams are used to describe what happen in the software system.

				Section Activity diagram {
					The activity diagram is used to represent workflows of stepwise activities.
				}

				Section Statemachine diagram {
					The statemachine diagram is used to represent the different states and transitions of a system.
				}

				Section Use case diagram {
					The use case diagram is used to describe the interaction of the user with a system.
				}
			}
		}

		Section Non-Goals {
			The UML Designer will not support the following diagrams:

			* Timing Diagram
			* Communication Diagram
			* Interaction Overview Diagram
			

			
		}

		Section Related Business Processes {
			Does the software implement a given business process ? How does it
			integrates with other business processes.
		}

		Section Actor and Roles {
			Who are they and how the system caters their need ?
		}

		Section Significant Scenarios {
			What are the use and functions which are significant for the architecture
			?
			Those should be described as scenarios in the form of "Given
			[CONTEXT], then
		}
	}
	Chapter Non-functional {
		Section {		}
	}
	Chapter Architecture {
		Section Constraints {
			If you have constraints, how do they affect the architecture?
			Constraints might be related to Time, budget, resource, approved
			technology lists, standards, skill profile of the development team.
		}

		Section Principles {
			What principles do you want to adopt ?

			Example principles include; architectural layering, use of frameworks
			and libraries, common design patterns and templates for
			building components and common approaches (e.g. error handling,
			logging, etc)
		}

		Section Logical {
			This section purpose is to describe your software big picture.

			Typically, you should document here major components, 
			interfaces or models.
		}

		Section Key Internal Interfaces {
			Synchronous or asynchronous, who has the ownership of the interfaces?
		}

		Section Key External Interfaces {
			Synchronous or asynchronous, who has the ownership of the interfaces?

			Is the interface always available or do you (e.g.) need to cache data
			locally?
		}

		Section Evolutions and Versioning {
			How often does the interface change and how is versioning handled?
		}
	}
	Chapter Design Guidelines {
		Section {		}
	}
	Chapter Operational {
		Section {		}
	}
	Chapter Architecture Justification {
		Section {		}
	}
}
