Document {
	Chapter Functional {
		Section Context {
			The UML Designer is a graphical designer compatible with the 
			"UML2 specification":http://www.omg.org/spec/UML/2.4.1/and based on "Obeo Designer":http://www.obeodesigner.com/.
			UML 2.4 has 14 types of diagrams divided into two categories:
			!/home/melanie/Obeo/dev/workspaces/UML-Modeling/documents/org.obeonetwork.dsl.uml2.doc.specification/images/UML_diagrams_overview.svg.png!
			

			It is released as Eclipse plugins under the EPL License and a standalone product is also built.
		}

		Section System purpose {
			The UML Designer does not cover all the diagrams described in the UML Standard. It is mainly focused on the more used diagrams (Class diagrams, Use Case diagram...) and try to provide a user friendly GUI.
			The intent is also to provide an easy way to make the transition from UML to domain specific modeling. This way users can continue to manipulate legacy UML models and start working with DSL. Users can even re-use the provided representations and work in a total transparence on both UML and DSL models at the same time.
		}

		Section Actor and Roles {
			*Sofware Developer*:
			@M
				@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#SoftwareDeveloper"
				 
			M@

			The software developer wants to use the UML Designer to describe the structure and the behaviour of its software components. He knows the UML standard and has already try many different UML products (open source and proprietary).
		}

		Section Key Functions {
			Section UML2 Standard coverage {
				!/home/melanie/Obeo/dev/workspaces/UML-Modeling/documents/org.obeonetwork.dsl.uml2.doc.specification/images/UML_diagrams_overview_coverage.png!
				
			}

			Section Manage UML projects {
				A UML project is a _Modeling project_ used to organize and manage the models and their representations (diagrams, tables, etc.). 
				Modeling projects are responsible for storing the representation data (diagrams, tables, etc.) in special representation files with the extension .aird.

					The UML Designer is integrated into Eclipse and provides the default views and editors generated by Obeo Designer.
						The _*Modeling*_ perspective provides all the required views, wizards and menus provided by UML Designer.

						The Modeling perspective provides the following views by default:

						* The _*Model Explorer*_ : is an explorer view which is the main UI to interact with the models. 
						* The _*Outline*_ : provides a structural overview of the document or model currently opened. For diagrams, it shows a miniature view of the whole diagram on which the user can easily navigate to other parts of the diagram for large ones.
						* The _*Properties*_ view gives detailed information about the currently selected element.
						* The _*Problems*_ view contains information markers of different severities (information only, warnings, or errors). This is where you will find validation errors on your models for example.

				Section Create a UML project {
					From the _Modeling_ perspective, it is possible to create a new UML project through the classical Eclipse main menus (File->New->UML Project) or from the toolbar (New->UML Project). A wizard opens, asking for a mandatory project name. Entering an invalid project name will result in an error message. By default, the modeling project will be created in the workspace’s location, but this can be changed: just uncheck «Use default location» and enter the path to the location where you want your modeling project to be created.

					This action creates automatically a new UML project with :

					** a UML model _xxx.uml_ = contains all the semantic elements, based on the standard "UML2":http://git.eclipse.org/c/uml2/org.eclipse.uml2.git which is the EMF-implementation of the UML2.x metamodel for the Eclipse platform.
					** a representation file _representation.aird_ = stores all the graphical information
					

					
				}

				Section Other actions on a project {
					As for any other kind of project in Eclipse, the following actions exist on a UML project: 

					* Delete
					* Rename
					* Import
					* Open
					* Close
					

					These actions are available from the Eclipse _File_ menu or from the _Model Explorer_ with a popup menu.
				}

				Section Explore the models {
					The Model Explorer view shows all the projects in the workspace and the files they contain. It adds some special capabilities to Modeling Projects, to allow the user to view and manipulate the semantic models and their graphical representations directly inside the explorer.

					Section Filter elements {
						The Model Explorer also supports filtering of elements: if the user enters some text in the search box at the top of the view, the view will filter out all the elements which do not match the text. It is possible to use the * and ? special characters in the search string to mean respectively «any text» (including none) and «any single character».
					}
				}
			}

			Section Manage viewpoints {
				Each UML project provides two kinds of viewpoints :

				* UML Structural Modeling : provides all the structural diagrams
				* UML Behavioral Modeling : provides all the behavioral diagrams
				

				This controls what kind of representations you can create on the semantic models inside the project. The set of viewpoints which are available to you will depend on what plug-ins you have installed, and on the type of semantic models which are inside the modeling projects. For example, even if you have installed the UML Designer, you will only be able to enable to corresponding viewpoints if your project contains UML models ( .uml files).

				To select which Viewpoints are enable on your project, simply use the Viewpoint Selection action in the context menu of the project itself. A dialog box will open which will show you all the viewpoints which are compatible with your project (depending on the kind of models it contains). You can check or un-check each viewpoint individually to enable or disable it, and click OK to validate your choice.
			}

			Section Manage representations {
				In UML Designer, the user manages representations. A representation is a diagram (class diagram, use case diagram...) or a table/cross-table (as in SysML Designer the requirements table).
				It is possible for the user to :

				Section Create a representation {
					There are three possibilities to create a representation :

					* In the _Model Explorer_ view, find the *semantic element* you want to create a diagram on, and in the context menu (available with a right click), select the New representation... sub-menu. It will give you a list of all the representations which can be created on this object. Just select the type of diagram you want, and enter the name of the new diagram in the dialog box which appears then. The newly created diagram will automatically open.
					* In the _Model Explorer_ view, right-click on the *UML Project* which contains the semantic element to represent and select _Create Representation_. In the wizard which appears, first select the type of diagram to create (if diagrams are available), and in the next page, select the semantic element to create it on. Only the semantic elements which are compatible with the selected diagram type will be available. Just select the element you want to represent, finish the wizard, and enter the name of the new diagram in the dialog box which appears then. The newly created diagram will automatically open.
					* Finally, on some representations, it may be possible to create new diagrams directly from the *context menu* of the element on which you want to create the diagram. If this is possible, it will be available in the _Navigate_ category of the element’s context menu. Once again, after selecting the type of diagram to create, enter the name of the new diagram in the dialog box which appears. The newly created diagram will automatically open. _Create new representation_ action is available according to the following cross table :
					

						|_. Element\Diagram      |_. Class |_. Component |_. Composite Structure |_. Deployment |_. Package |_. Object |_. Activity |_. Statemachine |_. Use Case |
						|_. Class              |x        |x            |x                      |x             |x      |x         |x          |x              |x       |
						|_. Operation          |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
						|_. Component          |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
						|_. Interface           |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
						|_. Artifact            |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
						|_. Package         |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
						|_. Object              |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
						|_. Activity            |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
						|_. Statemachine        |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
						|_. Use Case           |x    |x      |x                 |x         |x  |x     |x      |x         |x   |

						Example : When a _Class_ is selected in a diagram, it is possible to create other kinds of diagrams:

						** another Class diagram
						** a Component diagram
						** a Composite structure diagram
						** an Activity diagram
						** a Statemachine diagram

					Note that the set of diagrams you can create will depend both on the type of the selected element and on the set of Viewpoints which are currently enabled.
				}

				Section Delete a representation {				}

				Section Rename a representation {				}

				Section Open a representation {				}

				Section Close a representation {				}

				Section Copy a representation {				}

				Section Edit representations {
					When a diagram is opened by the user, it opens in the diagram editor. This editor is divided in three areas :

						* the _*palette*_, which gives access to additional tools (for example creation tools to add new elements to the diagram);
						* the _*main graphical area*_, which shows the elements and supports direct interaction with them;
						* the _*tabbar*_ at the top of the graphical area, which provides additional, more global operations.

						All diagrams have a palette of tools, which by default is docked on the right hand side of the main graphical area. The top row of the palette contains some general tools which are available on all diagrams, while the rest contains tools specific to each graphical modeler.

					Section Manage the palette {
						By default, the palette appears with a pre-defined size on the right hand side of the diagram.

								* Resizing. You can resize it to take more or less horizontal space by dragging the vertical separator between the palette and the diagram with your mouse.		
								* Folding. You can also fold the palette to hide it almost completely by clicking on the triangular icon in the corner of the palette header. When folded, you can restore it by clicking again on the same triangular icon. You can also keep it folded except when needed: when it is folded, a single click in the vertical folded area will reveal the palette temporarily so that you can select a tool. It will automatically hide again if you select a tool or click elsewhere.
								* Moving. If you prefer, you can move the palette to the left side of the diagram editor by dragging the palette’s header with the mouse, or right-clicking on the header and choosing Dock On > Left or Dock On > Right.

								Note : This feature is a standard feature provided by Obeo Designer.
					}

					Section Handle diagram elements {
						Section Select an element in a diagram {
							It appears in the top row of the palette, just below the header. The selection tool is the default one initially selected when a diagram is opened. To select an element on a diagram while this tool is active, simply click on it.

							Note : This feature is a standard feature provided by Obeo Designer.
						}

						Section Select multiple elements in a diagram {
							To select several elements at the same time, the user can :

							* either draw a rectangle on the diagram (all the elements completely contained in the rectangle will get selected), 
							* or click on each element individually while keeping the Ctrl key pressed. 
							

							When selecting elements which are already selected using this method, by clicking on them or drawing a rectangle around them, they are removed from the selection. You can combine both methods (de/selection by single click or by zone) to build complex selection incrementally by always keeping the Ctrl key pressed. 

							Selected elements have an outline and anchors drawn on their border. Note that when a selection contains multiple elements, exactly one of them has black selection anchors; the rest have white anchors. The element with the black anchors is called the primary selection, and some tools treat it differently than the others (for example alignment tools).

							Note : This feature is a standard feature provided by Obeo Designer.
						}

						Section Tabbar tools {
							The tab-bar contains tools to select groups of diagram elements in a single operation.

								* Select All. This is the default operation and will select all the elements visible on the diagram. It is also available via the Ctrl+A keyboard shortcut.
								* Select All Connectors. This action will select all connectors (aka edges) between diagram elements which are visible on the diagram, and only them.
								* Select All Shapes. This action will select all diagram elements which are not connectors/edges which are visible on the diagram.

								Note : This feature is a standard feature provided by Obeo Designer.
						}

						Section Link with Editor {
							The Model Explorer supports the _Link with Editor_ feature, which can be enabled by pressing the icon in the top right corner of the view (the one with two horizontal arrows). When this mode is enabled, if the user has a representation opened, clicking anywhere on it will automatically select the corresponding representation inside the Model Explorer (expanding the project and files if necessary). Conversely, if he selects a semantic element from one of the semantic models in the Model Explorer view and if this element is represented somewhere on the opened editor, it will be automatically selected.

							Note : This feature is a standard feature provided by Obeo Designer.
						}

						Section Move an element in a diagram {
							Note : This feature is a standard feature provided by Obeo Designer.
						}
					}

					Section Zoom on a diagram {
						A few general tools are available in standard on all diagrams. They appear in the top row of the palette, just below the header.

								* Zoom. Next in the palette come two buttons to control the zoom level of the main diagram area. When the Zoom in (resp. Zoom out) button is active, clicking anywhere on the diagram will increment (resp. decrement) the zoom level by 25%. The current zoom level is visible in the tabbar when no diagram element is selected (see the section on the tabbar buttons for more ways to control the zoom level).
					}

					Section Add notes {
						A few general tools are available in standard on all diagrams. They appear in the top row of the palette, just below the header.

								* Notes and note attachments. All diagrams support the creation of notes and text elements, which can be attached to diagram elements. These elements are purely graphical annotations, and have no effect on the semantic model. The three tools used to create them are available in a combo-box in the palette’s top row. By default, the Note tool (represented by a yellow sticky note) is selected. If you click on the small arrow next to the sticky note, a menu appears where you can select which of the three tools to enable: Note, Text or Note attachment.
								* Notes and Text elements are created in a similar way: either a single click somewhere on the diagram (which creates an element with a default size), or a click-drag to create the element with a custom initial size. Once created, one can edit the text inside the note or text zone usual the standard «direct edit» behavior ( F2, a slow double click, or by directly starting to enter alpha-numeric text). The only difference between notes and text zones is the visual presentation; notes have a yellow background (by default) and a border which represents a sticky not with a folded top-right corner.
								* Note attachments can be created to link either notes or text zone to diagram elements (including other notes and text attachments). To create an attachment, activate the tool and then click once on the source element and once on the target element. You can also click and drag from the source to the target elements.

								Note : This feature is a standard feature provided by Obeo Designer.
					}

					Section Show/Hide graphical elements {
						Note : This feature is a standard feature provided by Obeo Designer.Note : This feature is a standard feature provided by Obeo Designer.

						Section Elements {
							* Hide element from diagram :
							

									Every graphical element on a diagram can be hidden explicitly. To do that, simply right click on the graphical element (or elements if you want to hide several elements at once) you want to hide. Then, choose Show/Hide->Hide Element. The graphical element is now hidden from view. The icon in the tool-bar changes showing a «check box» on it as soon as at least one element has been hidden, to remind the user that what he see is not a complete view of the model being represented.

									* Hide element from the outline : It is also possible to hide an element from the outline view. Choose outline mode to see the semantic model in a tree viewer. You can now right click on an element and choose Hide element.

									There are two ways to reveal hidden elements:

									* On the outline view, in outline mode, you can see every model element. The elements that are hidden have their names displayed in italic style. To reveal one of this element, simply right click on it and choose Show element.
									* Show/Hide elements using a tree viewer

									When there is no selected element on the diagram, the tab bar provides the button Show/Hide. This button opens a dialog to manage the shown and hidden elements on the diagram with a tree view, using various selection buttons (Check all, Uncheck all, Expand All and Collapse all) and various filters (All element, only checked elements and only unchecked elements).
									You can also use regular expressions to easily retrieve the elements you want to hide/reveal.
						}

						Section Labels {
							The approach is the same as for other elements, except that there are a specific menus named «Hide/Show Label». It is possible to call this menu directly on the label or on its graphical element. So it is also possible to hide the label for:

									* Node : when the node label is on the border of its node
									* Edge : note that if a label of an edge is hidden (center, begin or end), all the labels of the edge will be hidden. Same behavior for the reveal action, if a label of an edge is revealed (center, begin or end), all the labels of the edge will be revealed.
						}

						Section Icons {
							When working on big diagrams, the user may want to hide the icons of the labels on all shapes or connectors, in order to improve the readability of the representations. To do so, open the Eclipse Preferences ( Window/ Preferences), and select the «Appearance» category ( Viewpoint/ Viewpoint Diagram/ Appearance).
									The options "Hide label icons on shapes" and "Hide label icons on connectors" will allow him to do so.
									By default, no shapes neither connectors are hidden.
						}
					}

					Section Refresh a diagram {
						This operation, which can also be invoked with the F5 keyboard shortcut, will force an update of the diagram’s content according to the latest version of the underlying semantic model. The default operational mode for UML Designer is to automatically refresh the diagram’s content whenever any relevant change is detected in the semantic model. This can be disabled using the Automatic Refresh preference (see Window > Preferences > Viewpoint). When in manual refresh mode (i.e. Automatic Refresh is unchecked), you must manually use the Refresh operation whenever you want the diagram to take into account changes in the model. Even in automatic refresh mode, it may be sometimes necessary to invoke an explicit, manual refresh using this operation if UML Designer got confused.
					}

					Section Layout a diagram {
						* Layouting mode : can be activated from the diagram toolbar, to allow the user to protect the semantic model while reorganizing a diagram. It avoids unfortunately changing properties or links related to model elements present on the diagram.
						

								* Automatic Layout Tools (Arrange All / Arrange Linked Bordered Nodes) :  Automatic layout uses a generic algorithm which tries to arrange the position and sizes of the elements on the diagram in a nice, readable way. In particular it makes sure, unless specific constraints pervent it, that no elements overlap each other, and that elements which contain others (i.e. containers) are large enough to show all their contents. It also tries to minimize the crossing of edges.
								* Alignment Control. This menu contains several operations (Auto size, Make height and width same size...) which can be used to align several graphical elements in various ways. The actions in this menu are only enabled when several elements are selected.
								* Pin/Unpin : It is possible to mark specific elements in a diagram as having a fixed location so that they are not moved by the Arrange All action. Diagram element pinning allows the user to combine both methods: manually arranging the position and size of elements when it is important while still being able to call Arrange All for the rest, without the risk of destroying your manual layouts.
								* Pin/Unpin. The final standard tools which are available in the top row of all the palette allow to mark or unmark diagram elements as pinned. Pinning an element on the diagram means that when an automatic layout of the diagram is requested (see the Arrange All action), the element will not be moved or resized: it will stay at the exact same position as you placed it. Pinned element can still be moved manually. To pin or unpin an element, simply select the appropriate tool (using the arrow right next to the icon to make the menu appear), and when the tool is active, click on the element to mark as pinned or un-pinned.							
								* Copy/Paste of layout : It is possible to duplicate layout of diagram elements, that is to say to replicate mutual organization of diagram elements from one diagram to another. This replication only applies to the same semantic elements between diagrams.
					}

					Section Customize graphical elements appearance {
						The style of each diagram elements can be customized. This customization can be applied from the tool bar, from the «Style» and «Appearance» tab of the property view, from the «Diagram» menu or from the contextual menu Format.

								The user can customize :

								* in container style : the background color, the background style, the border size, the foreground color, the label alignment, the label size and the label format.
								* in node style: the border size, the color, the label alignment, format, position and size.
								* in edge style: the folding style, the color, the label alignment, format, position and size, the line and routing style, the size and the target and source arrow.

								Theses customizations can be reset by the «Reset style customization» button available in the «Appearance» tab of the property view and in the diagram editor tool bar.
					}

					Section Activate rulers and the grid on a diagram {
						Finally, the Rulers And Grid page (see below) contains preferences to control whether or not new diagrams should initialy show the rulers and/or grids, and whether to enable the Snap to grid and Snap to shapes behavior by default. The preferences on this page are only taken into account as starting values for new diagrams. Each diagram has its own configuration of rulers and grid which can be modified in the Rulers & Grid section of the Properties view of the diagram itself.
					}
				}

				Section Get model content overview {
					The outline view has two display modes that you can select in its upper toolbar:

						* In Outline mode, it shows the content of the model in a tree view;
						* In Overview mode, it shows a complete overview of the active diagram. If the diagram is too big to be seen entirely on the diagram modeler, the overview is an easy way to navigate on the active diagram.
				}
			}

			Section Manage UML models {
				A UML project can contain multiple UML models. The user can :

				Section Create a new UML model {
					from the Eclipse menus (File->New->UML model) or from the toolbar (New->UML model).
				}

				Section Delete a UML model {
					From the Model Explorer view rigth-clicks on the UML file to remove and select Delete.
				}

				Section Manage referenced models {
					Section Reference an exising UML model {
						from the Project Dependencies in the Model Explorer view. A modeling project has always an element called Project Dependencies available. This is used to import external models, which are stored outside of the modeling project but used in it. To use a semantic model stored outside of the current modeling project, it must be added to the project dependencies. That does not change its location but simply allows access to its content. To add an external model to a modeling project, right-click on Project Dependencies then select Add Model. A wizard page opens, allowing the user to enter the URI of the model to add. If the model is in the workspace, the Browse Workspace button can be used to look for it. If the model is in the file system, the Browse File System button must be used to find it. Otherwise, the user must enter the model’s URI manually. Project dependencies can contain both semantic models and graphical models ( i.e. representations files).
					}

					Section Remove a referenced model {
						Referenced models can be removed if they are not used, just right-click on the model in the Model Dependencies and select Remove. This action does not delete the model itself but only the reference.
					}
				}

				Section Validate a model {				}

				Section Import a model {				}

				Section Export a model {				}
			}

			Section Structure diagrams {				@M
					@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#StructuralDiagrams"
					 
				M@

				The structural diagrams are used to describe the structure of a software system.

				Section Class diagram {					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#ClassDiagrams"
						 
					M@

					The class diagram is used to describe the structure of the system by showing the classes, the interfaces, their attributes, their operations and their relationships.

					Section Manage types {
						It is possible to create and delete types in the class diagram.
						The available types in the Class diagram are :

						* Class
						* Enumeration
						* Interface
						* Datatype
						* Primitive type
						

						

						Section Create a type {
							It is possible to create a type by selecting the type creation tool from the palette and then clicking on the diagram or an element. A diagram is associated to a package and in this case the element is created under the corresponding package in the UML model.

							Section Create a class {								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAClass"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='Class']"
									 
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/createAType/CreateAClass.java#//@methods[name='createAClass()']"
									 
								M@
							}

							Section Create an enumeration {								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAnEnumeration"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='DataTypes']/@tools.0"
									 
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/createAType/CreateAnEnumeration.java#//@methods[name='createAnEnumeration()']"
									 
								M@
							}

							Section Create an interface {								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAnInterface"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='Interface']"
									 
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/createAType/CreateAnInterface.java#//@methods[name='createAnInterface()']"
									 
								M@
							}

							Section Create a datatype {								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateADatatype"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='DataTypes']/@tools.2"
									 
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/createAType/CreateADatatype.java#//@methods[name='createADatatype()']"
									 
								M@
							}

							Section Create a primitive type {								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='DataTypes']/@tools.1"
									 
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/createAType/CreateAPrimitiveType.java#//@methods[name='createAPrimitiveType()']"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAPrimitiveType"
									 
								M@
							}

							Section Create a package {								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='Package']"
									 
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/createAType/CreateAPackage.java#//@methods[name='createAPackage()']"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAPackage"
									 
								M@
							}

							Section Create a class under a visible package {
								In this case the user selects a visible package on the diagram as container for the new class.
								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAClassUnderAVisiblePackage"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='Class']"
									 
								M@
							}
						}

						Section Delete a type {
							It is possible to delete a semantic element : 

							* from the class diagram by using : 
							** Ctrl+D on keyboard, 
							** the context menu action 'Delete from model',
							** the toolbar action 'Delete from model'; 
							* from the model explorer by using : 
							** the context menu action 'Delete'
							

							

							Section Delete a class {								@M
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/deleteAType/DeleteAClass.java#//@methods[name='deleteAClass()']"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#DeleteAClass"
									 
								M@
							}
						}

						Section Move a type {
							Section Move a class to another package {							}
						}
					}

					Section Manage features {
						Section Create a feature {
							Section Create a property {								@M
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageFeatures/createAFeature/CreateAProperty.java#/"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@containerMappings[name='CD_ReusedMappingForFeatures']/@subNodeMappings[name='CD_Property']"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAProperty"
									 
								M@
							}

							Section Create a typed property {							}

							Section Create an operation {							}

							Section Create a literal {							}
						}

						Section Delete feature {
							Section Delete a property {							}
						}
					}

					Section Manage relationships {
						Section Create a relationship {
							Section Create an association {							}

							Section Create a reference {							}

							Section Create a composition {							}

							Section Create an aggregation {							}

							Section Create an association class {							}

							Section Create a generalization {							}

							Section Create an interface realization {							}

							Section Create a dependency {							}

							Section Create a usage {							}

							Section Create a nest classifier {							}
						}

						Section Delete a relationship {
							Section Delete an association {							}
						}

						Section Reconnect a relationship {
							Section Reconnect an association {							}

							Section Reconnect a reference {							}

							Section Reconnect a composition {							}

							Section Reconnect an aggregation {							}

							Section Reconnect an association class {							}

							Section Reconnect a generalization {							}

							Section Reconnect an interface realization {							}

							Section Reconnect a dependency {							}

							Section Reconnect a usage {							}

							Section Reconnect a nest classifier {							}
						}
					}

					Section Manage existing elements {
						Section Add an existing element {							@M
								@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#AddAnExistingElement"
								 
							M@

							Section Add an existing element from current package {
								Section Add an existing element using the palette tool {
									In the palette, an _Existing elements_ section contains a _Add_ tool.
									When this tool is selected a wizard will propose all the existing elements in the model which could be visible on the class diagram.
									@M
										@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='CD_AddExistingElements']"
										 
									M@

									Section Add a class {										@M
											@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#AddAClassFromCurrentPackage"
											 
											@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='CD_AddExistingElements']/@initialOperation/@firstModelOperations/@subModelOperations.0/@subModelOperations.0"
											 
										M@
									}

									Section Add an enumeration {										@M
											@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#AddAnEnumerationFromCurrentPackage"
											 
											@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='CD_AddExistingElements']/@initialOperation/@firstModelOperations/@subModelOperations.0/@subModelOperations.2"
											 
										M@
									}

									Section Add an interface {									}

									Section Add a datatype {									}

									Section Add a primitive type {									}

									Section Add a package {									}
								}

								Section Drag & drop an element from the Model Explorer {
									In the model explorer, an element can be selected and then dropped in the opened class diagram.

									Section Drag & drop a class {										@M
											@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#DragAndDropAClassFromTheModelExplorer"
											 
										M@
									}

									Section Drag & drop an enumeration {									}

									Section Drag & drop an interface {									}

									Section Drag & drop a datatype {									}

									Section Drag & drop a primitive type {									}

									Section Drag & drop a package {									}
								}
							}

							Section Add an existing element from another package {
								The user can see that an element is not coming from the current package :

									* the element border is lighter than the element border of elements defined in the current package
									* a tooltip shows the container package of the element if the element is not contained by the current package

								Section Add a class {								}

								Section Add an enumeration {								}

								Section Add an interface {								}

								Section Add a datatype {								}

								Section Add a primitive type {								}

								Section Add a package {								}
							}
						}

						Section Remove an existing element {
							It is possible to remove an existing element from a diagram. In this case the element is only deleted from the representation but it is not removed from the UML model. This _Remove_ tool exists in the _Existing elements_ section in the palette. An equivalent tool is also available from the tabbar diagram editor.

							Section Remove a class {							}
						}
					}

					Section Add related elements {
						Section From a class {						}

						Section From an interface {						}

						Section From an enumeration {						}

						Section From a package {						}

						Section From a datatype {						}

						Section From a primitive type {						}

						Section From a class diagram {						}
					}

					Section Edit labels {
						To edit label, select an element in diagram and press F2. Then you can directly update the label value.

						Section Edit elements {						}

						Section Edit relationships {						}

						Section Edit features {						}
					}
				}

				Section Component diagram {
					The component diagram is used to describe the structure of the system by showing the components and their connectors.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#ComponentDiagrams"
						 
					M@

					Section Manage nodes {
						It is possible to create and delete types in the Component diagram.
						The available types in the Component diagram are :

						* Component
						* Class
						* Port
						* Interface
						

						

						Section Create a node {
							It is possible to create a node by selecting the node creation tool from the palette and then clicking on the diagram or an element. A diagram is associated to a package and in this case the element is created under the corresponding package in the UML model.

							Section Create a component {							}

							Section Create a component into a component {							}

							Section Create a class {							}

							Section Create a class into a component {							}

							Section Create a port on a component {							}

							Section Create a port on a class {							}

							Section Create an interface {							}
						}

						Section Delete a node {
							It is possible to delete a semantic element : 

							* from the component diagram by using : 
							** Ctrl+D on keyboard, 
							** the context menu action 'Delete from model',
							** the toolbar action 'Delete from model'; 
							* from the model explorer by using : 
							** the context menu action 'Delete'
							

							

							Section Delete a component {							}
						}
					}

					Section Manage edges {
						It is possible to create and delete edges in the Component diagram.

						Section Create an edge {
							Section Create a usage {							}

							Section Create a dependency {							}

							Section Create a realization {							}

							Section Create a redefined {							}

							Section Create a connector {							}
						}

						Section Delete an edge {
							Section Delete a dependency {							}

							Section Delete a realization {							}

							Section Delete a redefined {							}

							Section Delete a connector {							}
						}
					}

					Section Manage existing elements {
						Section Add an existing element from the current package {
							Section Add an existing element {
								Section Add a component {								}

								Section Add a component into an existing component {								}

								Section Add a class {								}

								Section Add a class into an existing component {								}

								Section Add an interface {								}

								Section Add a package {								}
							}

							Section Drag & drop an element from the Model Explorer {
								Section Drag & drop a component {								}

								Section Drag & drop a class {								}

								Section Drag & drop an interface {								}

								Section Drag & drop a package {								}
							}
						}

						Section Add an existing element from another package {
							The user can see that an element is not coming from the current package :

									* the element border is lighter than the element border of elements defined in the current package
									* a tooltip shows the container package of the element if the element is not contained by the current package

							Section Add a component {							}

							Section Add a class {							}

							Section Add an interface {							}

							Section Add a package {							}
						}

						Section Remove an existing element {
							It is possible to remove an existing element from a diagram. In this case the element is only deleted from the representation but it is not removed from the UML model. This _Remove_ tool exists in the _Existing elements_ section in the palette. An equivalent tool is also available from the tabbar diagram editor.

							Section Remove a component {							}
						}
					}

					Section Add related elements {
						Section From a component {						}

						Section From a class {						}

						Section From an interface {						}

						Section From a port {						}

						Section From a component diagram {						}
					}

					Section Edit labels {
						Section Edit node labels {						}

						Section Edit edge labels {						}
					}

					Section Reconnect edges {
						Section Reconnect a usage {						}

						Section Reconnect a dependency {						}

						Section Reconnect a realization {						}

						Section Reconnect a redefined {						}

						Section Reconnect a connector {						}
					}
				}

				Section Composite structure diagram {
					The composite structure diagram is used to describe the structure of the system by showing the internal structure of classes and the interfaces they used to collaborate.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CompositeStructureDiagrams"
						 
					M@

					Section Manage nodes {
						It is possible to create and delete types in the Composite structure diagram.
						The available types in the Composite structure diagram are :

						* Component
						* Class
						* Part
						* Property
						* Port
						* Required Service
						* Provided Service
						

						

						Section Create a node {
							It is possible to create a node by selecting the node creation tool from the palette and then clicking on the diagram or an element. A diagram is associated to a package and in this case the element is created under the corresponding package in the UML model.

							Section Create a component {							}

							Section Create a component into a component {							}

							Section Create a class {							}

							Section Create a class into a component {							}

							Section Create a part {							}

							Section Create a property {							}

							Section Create a port on a component {							}

							Section Create a port on a class {							}

							Section Create a required service {
								Not implemented, interface must be created from class diagram or component diagram
							}

							Section Create a provided service {
								Not implemented, interface must be created from class diagram or component diagram
							}
						}

						Section Delete a node {
							Section Delete a component {							}
						}
					}

					Section Manage connectors {
						It is possible to create and delete connectors in the Composite structure diagram.

						Section Create a connector {						}

						Section Delete a connector {						}
					}

					Section Manage existing elements {
						Section Add an existing element from the current package {
							Section Add an existing element {
								Section Add a component {								}

								Section Add a component into a component {								}

								Section Add a class {								}

								Section Add a class into a component {								}

								Section Add a part {								}

								Section Add a property {								}

								Section Add a port on a component {								}

								Section Add a port on a class {								}

								Section Add a required service {								}

								Section Add a provided service {								}
							}

							Section Drag & drop an element from the Model Explorer {
								Section Drag & drop a component {								}

								Section Drag & drop a class {								}

								Section Drag & drop a part {								}

								Section Drag & drop a property {								}

								Section Drag & drop an interface {								}

								Section Drag & drop a package {								}
							}
						}

						Section Add an existing element from another package {
							The user can see that an element is not coming from the current package :

									* the element border is lighter than the element border of elements defined in the current package
									* a tooltip shows the container package of the element if the element is not contained by the current package

							Section Add a component {							}

							Section Add a class {							}

							Section Add an interface {							}

							Section Add a package {							}
						}

						Section Remove an existing element {
							Section Remove a component {							}
						}
					}

					Section Add related elements {
						Section From a component {						}

						Section From a class {						}

						Section From a required service {						}

						Section From a provided service {						}

						Section From a port {						}

						Section From a composite structure diagram {						}
					}

					Section Edit labels {
						Section Edit node labels {						}
					}

					Section Reconnect a connector {					}
				}

				Section Deployment diagram {
					The deployment diagram is used to describe the structure of the system by showing the physical deployment of artifacts on nodes.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#DeploymentDiagrams"
						 
					M@

					Section Manage nodes {
						It is possible to create and delete types in the Deployment diagram.
						The available types in the Deployment diagram are :

						* Node
						* Device
						* Execution Environment
						* Artifact
						

						

						Section Create a type {
							It is possible to create a type by selecting the node creation tool from the palette and then clicking on the diagram or an element. A diagram is associated to a package and in this case the element is created under the corresponding package in the UML model.

							Section Create a node {							}

							Section Create a device {							}

							Section Create an execution environment {							}

							Section Create an artifact {							}
						}

						Section Delete a type {
							Section Delete a node {							}
						}
					}

					Section Manage relationships {
						Section Create a relationship {
							Section Create a link {							}

							Section Create a dependency {							}

							Section Create a generalization {							}

							Section Create a deployment {							}

							Section Create a manifestation {							}
						}

						Section Delete an edge {
							Section Delete a link {							}

							Section Delete a dependency {							}

							Section Delete a generalization {							}

							Section Delete a deployment {							}

							Section Delete a manifestation {							}
						}
					}

					Section Manage existing elements {
						Section Add an existing element from the current package {
							Section Add an existing element {
								Section Add a node {								}

								Section Add a node into a node {								}

								Section Add a device {								}

								Section Add a device into a node {								}

								Section Add an execution environment {								}

								Section Add an execution environment into a node {								}

								Section Add an artifact {								}

								Section Add an artifact into a node {								}
							}

							Section Drag & drop an element from the Model Explorer {
								Section Drag & drop a node {								}

								Section Drag & drop a device {								}

								Section Drag & drop an execution environment {								}

								Section Drag & drop an artifact {								}

								Section Drag & drop a package {								}
							}
						}

						Section Add an existing element from another package {
							The user can see that an element is not coming from the current package :

									* the element border is lighter than the element border of elements defined in the current package
									* a tooltip shows the container package of the element if the element is not contained by the current package

							Section Add a node {							}

							Section Add a node {							}

							Section Add a device {							}

							Section Add an execution environment {							}

							Section Add an artifact {							}
						}

						Section Remove an existing element {
							Section Remove a node {							}
						}
					}

					Section Add related elements {
						Section From a node {						}

						Section From a device {						}

						Section From an execution environment {						}

						Section From an artifact {						}

						Section From a deployment diagram {						}
					}

					Section Edit labels {
						Section Edit node labels {						}

						Section Edit relationships labels {						}
					}

					Section Reconnect edges {
						Section Reconnect a link {						}

						Section Reconnect a dependency {						}

						Section Reconnect a generalization {						}

						Section Reconnect a deployment {						}

						Section Reconnect a manifestation {						}
					}
				}

				Section Package diagram {
					The package diagram is used to describe the structure of the system by showing the packages and their dependencies.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#PackageDiagrams"
						 
					M@

					Section Manage packages {
						It is possible to create and delete packages in the Package diagram.
						The available types in the Package diagram are :

						* Package
						* Import Package
						

						

						Section Create a package {
							It is possible to create a package by selecting the node creation tool from the palette and then clicking on the diagram or an element. A diagram is associated to a package and in this case the element is created under the corresponding package in the UML model.

							Section Create a package {							}

							Section Create an import package {							}
						}

						Section Delete packages {
							Section Delete a package {							}

							Section Delete an import package {							}
						}
					}

					Section Manage relationships {
						Section Create a relationship {
							Section Create a contained in {							}

							Section Create an import {							}

							Section Create a usage {							}

							Section Create a dependency {							}
						}

						Section Delete an relationship {
							Section Delete a contained in {							}

							Section Delete an import {							}

							Section Delete a usage {							}

							Section Delete a dependency {							}
						}
					}

					Section Manage existing elements {
						Section Add an existing element from the current package {
							Section Add an existing package {							}

							Section Drag & drop a package from the Model Explorer {							}
						}

						Section Add an existing element from another package {
							The user can see that an element is not coming from the current package :

									* the element border is lighter than the element border of elements defined in the current package
									* a tooltip shows the container package of the element if the element is not contained by the current package

							Section Add a package {							}
						}

						Section Remove an existing element {
							Section Remove a package {							}
						}
					}

					Section Add related elements {
						Section From a package {						}

						Section From an import package {						}

						Section From a package diagram {						}
					}

					Section Edit labels {
						Section Edit package labels {						}

						Section Edit relationships labels {						}
					}

					Section Reconnect edges {
						Section Reconnect a contained in {						}

						Section Reconnect a dependency {						}

						Section Reconnect a usage {						}

						Section Reconnect an import {						}
					}
				}

				Section Object diagram {
					The object diagram is used to describe the structure of the system by showing the objects at a specific time.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#ObjectDiagrams"
						 
					M@

					Section Manage instances {
						Section Create an instance {
							It is possible to create an instance by selecting the node creation tool from the palette and then clicking on the diagram or an element. A diagram is associated to a package and in this case the element is created under the corresponding package in the UML model.
						}

						Section Set default value {						}

						Section Delete instances {						}
					}

					Section Manage references {
						Section Reference an instance {						}

						Section Delete a reference {						}
					}

					Section Manage existing elements {
						Section Add an existing element from the current package {
							Section Add an existing instance {							}

							Section Drag & drop an existing element from the Model Explorer {
								Section Drag & drop an instance {								}

								Section Drag & drop a package {								}

								Section Drag & drop a class {								}
							}
						}

						Section Add an existing element from another package {
							The user can see that an element is not coming from the current package :

									* the element border is lighter than the element border of elements defined in the current package
									* a tooltip shows the container package of the element if the element is not contained by the current package

							Section Add an instance {							}
						}

						Section Remove an existing element {
							Section Remove an instance {							}
						}
					}

					Section Add related elements {
						Section From an instance {						}

						Section From an object diagram {						}
					}

					Section Edit labels {
						Section Edit instance labels {						}

						Section Edit default value {						}
					}

					Section Reconnect edges {
						Section Reconnect a reference {						}
					}
				}

				Section Profile diagram {
					The profile diagram operates at the metamodel level to provide new stereotypes and profiles.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#ProfileDiagrams"
						 
					M@

					Section Manage profile {
						Section Create a profile {						}

						Section Create a stereotype {						}

						Section Create a property {						}

						Section Create a metaclass {						}

						Section Create an extension {						}

						Section Delete a profile {						}

						Section Delete a stereotype {						}

						Section Delete a property {						}

						Section Delete a metaclass {						}

						Section Delete an extension {						}
					}

					Section Manage existing elements {
						Section Add an existing element from the current profile {
							Section Add an existing stereotype {							}

							Section Drag & drop an existing element from the Model Explorer {
								Section Drag & drop an stereotype {								}

								Section Drag & drop a profile {								}
							}
						}

						Section Add an existing element from another profile {
							The user can see that an element is not coming from the current package :

									* the element border is lighter than the element border of elements defined in the current package
									* a tooltip shows the container package of the element if the element is not contained by the current package

							Section Add a stereotype {							}
						}

						Section Remove an existing element {
							Section Remove a stereotype {							}
						}
					}

					Section Add related elements {
						Section From a stereotype {						}

						Section From an profile diagram {						}
					}

					Section Edit existing elements {
						Section Edit stereotype labels {						}

						Section Edit property {						}

						Section Edit profile {						}
					}

					Section Reconnect an extension {					}
				}
			}

			Section Behavior diagrams {
				The behavioral diagrams are used to describe what happen in the software system.
				@M
					@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#BehavioralDiagrams"
					 
				M@

				Section Activity diagram {
					The activity diagram is used to represent workflows of stepwise activities.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#ActivityDiagrams"
						 
					M@

					Section Manage activities {
						The available types in the Activity diagram are :

						* Partition
						* Initial node, activity final node, flow final node, decision node, merge node, fork node, join node
						* Opaque action
						* Activity state
						* Call operation action
						* Activity parameter
						* Data store
						* Input/Output pin
						

						

						Section Create an activity {
							Section Create a partition {							}

							Section Create an initial node {							}

							Section Create an activity final node {							}

							Section Create a flow final node {							}

							Section Create a merge node {							}

							Section Create a fork node {							}

							Section Create a join node {							}

							Section Create an opaque action {							}

							Section Create an activity state {							}

							Section Create a call operation action {							}

							Section Create an activity parameter {							}

							Section Create a data store {							}

							Section Create an input pin {							}

							Section Create an output pin {							}
						}

						Section Delete an activity {						}
					}

					Section Manage flows {
						It is possible to create and delete edges in the Activity diagram.

						Section Create a flow {
							Section Create a control flow {							}

							Section Create an object flow {							}
						}

						Section Delete a flow {
							Section Delete a control flow {							}

							Section Delete an object flow {							}
						}
					}

					Section Edit labels {
						Section Edit opaque action labels {						}
					}

					Section Reconnect flows {
						Section Reconnect a control flow {						}

						Section Reconnect  an object flow {						}
					}
				}

				Section Statemachine diagram {
					The statemachine diagram is used to represent the different states and transitions of a system.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#StatemachineDiagrams"
						 
					M@

					Section Manage statemachine {
						The available types in the statemachine diagram are :

						* Region
						* State node
						* Initial node
						* Final node
						* Fork
						* Join
						* Choice
						* Junction
						* Terminate
						* Shallow History, Deep History
						* Entry point
						* Exit point
						

						

						Section Create a statemachine {
							Section Create a region {							}

							Section Create an initial node {							}

							Section Create a final node {							}

							Section Create a state node {							}

							Section Create a fork node {							}

							Section Create a join node {							}

							Section Create a choice node {							}

							Section Create a junction node {							}

							Section Create a terminate node {							}

							Section Create a shallow history {							}

							Section Create a deep history {							}

							Section Create an entry point {							}

							Section Create an exit point {							}
						}

						Section Delete a statemachine {						}
					}

					Section Manage transitions {
						It is possible to create and delete edges in the Statemachine diagram.

						Section Create a transition {						}

						Section Delete a transition {						}
					}

					Section Edit labels {
						Section Edit node labels {						}

						Section Edit transition guards {						}
					}

					Section Reconnect a transition {					}
				}

				Section Use case diagram {
					The use case diagram is used to describe the interaction of the user with a system.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#UseCaseDiagrams"
						 
					M@

					Section Manage use cases {
						The available types in the Use case diagram are :

						* Actor
						* Use Case
						* Component
						* Artifact
						* Datatype
						* Interface
						* Collaboration
						* Class
						

						

						Section Create a usecase {
							Section Create an actor {							}

							Section Create a use case {							}

							Section Create a subject {
								Section Create a component {								}

								Section Create an artifact {								}

								Section Create a datatype {								}

								Section Create an interface {								}

								Section Create a class {								}

								Section Create a collaboration {								}
							}
						}

						Section Delete a use case {						}
					}

					Section Manage relathionships {
						Section Create a relathionship {
							Section Create an association {							}

							Section Create an extend {							}

							Section Create an include {							}

							Section Create a generalization {							}
						}

						Section Delete a relathionship {
							Section Delete an association {							}
						}
					}

					Section Edit labels {
						Section Edit element labels {						}
					}

					Section Reconnect relathionships {
						Section Reconnect an association {						}

						Section Reconnect an extend {						}

						Section Reconnect an include {						}

						Section Reconnect a generalization {						}
					}
				}

				Section Sequence diagram {
					Section Manage interactions {
						The available types in the Use case diagram are :

						* Actor
						* Lifelines
						* Execution
						* Messages
						* Combined Fragments
						* Interaction use
						

						

						Section Create an interaction {
							Section Create lifelines {
								Section Create an actor {								}

								Section Create a class {								}

								Section Create a destruction occurence {								}
							}

							Section Create executions {
								Section Create an execution on a lifeline {								}

								Section Create an execution on an execution {								}

								Section Create state invariant {								}
							}

							Section Create messages {
								Section Create an asynchronous message {								}

								Section Create a synchronous message {								}

								Section Create a create message {								}

								Section Create a delete message {								}

								Section Create a lost message {								}

								Section Create a found message {								}
							}

							Section Create a combined fragment {							}
						}
					}

					Section Delete an interaction {					}

					Section Reorder interaction elements {
						Section Reorder lifeline {						}

						Section Reorder an execution {						}

						Section Reorder a message {						}
					}

					Section Edit labels {					}
				}
			}

			Section Standard features {
				Section Modify element properties {
					Section Properties view {
						Section Generic tabs {
							In the Properties view, you will find several tabs which will not be the same if an element is selected on the diagram or not. If an element is selected on the diagram, you will have on the Properties view the following generic tabs:

							* Semantic : This tab shows the properties of the semantic element selected. You will find the same informations as in the properties view of an Ecore editor.
							* Style : This tab presents the properties about the graphical representation of the element. You will find informations like label size and format, shape of the graphical object, background and foreground colors...
							* Appearance : This tab allows to choose the style and size of text fields contained by the element.
							

							If you do not select an element, you will have in the Properties view the properties of the diagram itself :

							* Semantic : The diagram has a semantic element which is the element on which we have created the diagram in the Model Content view. The content is the same as presented previously.
							* Filters : You can apply filters on your diagram. Filters will be presented in a following part.
							* Documentation : This tab provides a text area for the current diagram documentation.
							* Rulers & Grid : Allow the user to display vertical and horizontal rulers and also a grid on the diagram. You can choose how is displayed the grid (Solid style, Dash style, Dot style...).
							* Appearance : This tab allows to choose the style and size of text fields of every elements of diagram which have not been specifically set on the Representation Diagram.
							

							
						}

						Section Specific tabs {
							
							
							|_. Type      |_. Tab |_. Property |_. Sub properties |_. Widget |
							|Actor           |
							|_. General|_. |Tab|
							|_. |name|Text|
							|_. |visibillity|Radio|
							|_. |isAbstract|Checkbox|
							|_. |isLeaf|Checkbox|
							|_. Stereotypes|_. _. |Tab|
							|_. |appliedStereotypes|_. Table|
							|_. |_. Stereotype|Column|
							|_. |_. Profile|Column|
							|_. |_. Required|Column|
							|_. |_. ApplyStereotype|Button|
							|_. |_. UnApplyStereotype|Button|

							
						}
					}

					Section Double click wizards {
						To modify a element properties it is also possible to just double click on an elemnt in a diagram, it opens a wizard containing the main properties associated to the element.
					}
				}

				Section Delete element {
					Section Delete from model {
						This action removes both the selected graphical element and the corresponding semantic elements.
					}

					Section Delete from diagram {
						This action removes the selected graphical element from the diagram, but does not delete the corresponding semantic elements.
					}
				}

				Section Copy/Paste element {
					The purpose of the copy/paste action is to duplicate the semantic element.

					This action is available by selecting an element and using the contextual menu or by typing Ctrl-C/Ctrl-V on keyboard: 

					* from the Model Explorer view 
					* from a diagram
					

					
				}

				Section Manage comments {
					Section Comments layout {					}

					Section Create comment {					}

					Section Link comment {					}

					Section Remove comment {					}

					Section Edit comment {					}
				}

				Section Manage profiles {
					Section Profiles layout {					}

					Section Add profile {					}

					Section Remove profile {					}

					Section Import a profile {					}

					Section Export a profile {					}
				}

				Section Manage stereotypes {
					Section Profiles layout {					}

					Section Add stereotype {					}

					Section Remove stereotype {					}
				}

				Section Export models {
					Section Export project as HTML site {
						Export all the models with their representations into an HTML site. The site displays the model explorer on the left with the model elements and their corresponding clickable representations. When selecting a model element on a representation, the site displays its properties. All the pages are generated with Acceleo templates and can easily be adapted.
					}

					Section Export diagrams as images {
						It is possible to export a diagram to an image file. To do that right-click on the diagram and choose the menu _Export diagram as image_ or select the corresponding icon in the diagram tab-bar. After selecting the file path, the user can choose the image format and he wants to overwrite an existing file without warning. On the first export of diagram as image the name is set by default with the representation name. After there is an history to select the last export. If you do not specify the file extension, the extension is determined from the selected image format. You can choose the directory in which to create the file using the Browse button.

						It is possible to export all diagram of a representations file at once. To do that, select the representations file (.aird file) and right-click on it. Then choose the menu Export diagrams as image.... On the opened pop-up select the path of the folder where the images will be exported.
						The same functionality is available on every semantic elements which has representations from the Model Explorer view. In this case, only the diagrams of the selected element will be exported.
						Note: Due to some technical limitations, not all export format support all the features of diagrams. For example, exporting to PNG files will not show gradients on diagram elements. The JPG format is the one which currently produces the best result in terms of fidelity to what you see in the diagram editors.
					}
				}
			}

			Section Find documentation and help {
				Welcome page :

				* Eclipse integration :
				* Product integration :
				

				Help contents :

				* 	User guide
				* 	Cheatsheets
				

				Dynamic help:

				* on diagrams opening
				

				Example:

				* Travel agency
				

				Support :

				* Community : Obeonetwork forum
				* Professional
				

				
			}
		}

		Section Non-Goals {
			The UML Designer does not support the following diagrams:

			* Timing Diagram
			* Communication Diagram
			* Interaction Overview Diagram
			

			
		}

		Section Related Business Processes {
			Does the software implement a given business process ? How does it
			integrates with other business processes.
		}
	}
	Chapter Non-functional {
		The following non-functional requirements are defined :

		* *Usability* : 
		** User friendly interfaces : The UML Designer is easy to use and to get started with. The different interfaces are intuitive and learnable.
		** Documentation : User guide and other supporting materials (tutorials, video, cheatsheets) are available to help the user.
		* *Licensing* : The UML Designer is provided as an open source project under EPL licence.
		* *Response time* : The response time perceived by the end user must be good and when the processing would be longer the user must be informed.
		

		
	}
	Chapter Technical {
		Section Architecture {
			Section Constraints {
				UML Designer must be based on :

				* Obeo Designer, 
				* "UML2":http://git.eclipse.org/c/uml2/org.eclipse.uml2.git which is the EMF-implementation of the UML2.x metamodel for the Eclipse platform.
				

				
			}

			Section Principles {
				Obeo Designer "best practices":

				What principles do you want to adopt ?

				Example principles include; architectural layering, use of frameworks
				and libraries, common design patterns and templates for
				building components and common approaches (e.g. error handling,
				logging, etc)
			}

			Section Logical {
				This section purpose is to describe your software big picture.

				Typically, you should document here major components, 
				interfaces or models.
			}

			Section Key Internal Interfaces {
				Synchronous or asynchronous, who has the ownership of the interfaces?
			}

			Section Key External Interfaces {
				Synchronous or asynchronous, who has the ownership of the interfaces?

				Is the interface always available or do you (e.g.) need to cache data
				locally?
			}

			Section Evolutions and Versioning {
				The UML Designer version is a 3 digits number : x.y.z.

				As UML Designer is based on Obeo Designer the release cycle is based on the Obeo Designer one.
				Each time a new main version of Obeo Designer is released, the UML Designer version is incremented.

				One main version is released every 2-3 months to provide new features and minor versions for bug fixes are released when it is needed.

				The roadmap is available on the "obeo network":http://marketplace.obeonetwork.com/module/uml#release-notes.
			}
		}

		Section Design Guidelines {
			Section {			}
		}

		Section Operational {
			Section {			}
		}

		Section Architecture Justification {
			Section {			}
		}
	}
}
