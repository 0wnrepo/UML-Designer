Document {
	Chapter Functional {
		Section Context {
			The UML Designer is a graphical designer compatible with the 
			"UML2 specification":http://www.omg.org/spec/UML/2.4.1/and based on "Obeo Designer":http://www.obeodesigner.com/.
			UML 2.2 has 14 types of diagrams divided into two categories:
			!/home/melanie/Obeo/dev/workspaces/UML-Modeling/documents/org.obeonetwork.dsl.uml2.doc.specification/images/UML_diagrams_overview.svg.png!
			

			It is released as Eclipse plugins under the EPL License and a standalone product is also built.
		}

		Section System purpose {
			The UML Designer does not cover all the diagrams described in the UML Standard. It is mainly focused on the more used diagrams (Class diagrams, Use Case diagram...) and try to provide a user friendly GUI.
			The intent is also to provide an easy way to make the transition from UML to domain specific modeling. This way users can continue to manipulate legacy UML models and start working with DSL. Users can even re-use the provided representations and work in a total transparence on both UML and DSL models at the same time.
		}

		Section Actor and Roles {
			*Sofware Developer*:
			@M
				@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#SoftwareDeveloper"
				 
			M@

			The software developer wants to use the UML Designer to describe the structure and the behaviour of its software components. He knows the UML standard and has already try many different UML products (open source and proprietary).
		}

		Section Key Functions {
			The UML Designer provides two kinds of viewpoints :

			* UML Structural Modeling : provides all the structural diagrams
			* UML Behavioral Modeling : provides all the behavioral diagrams
			

			

			Section Modeling perspective {
				The UML Designer is integrated into Eclipse and provides the default views and editors generated by Obeo Designer.
					The _*Modeling*_ perspective provides all the required views, wizards and menus provided by UML Designer.

					The Modeling perspective provides the following views by default:

					* The _*Model Explorer*_ : is the main UI to interact with your models.
					* The _*Outline*_ : provides a structural overview of the document or model currently opened. For diagrams, it shows a miniature view of the whole diagram on which the user can easily navigate to other parts of the diagram for large ones.
					* The _*Properties*_ view gives detailed information about the currently selected element.
					* The _*Problems*_ view contains information markers of different severities (information only, warnings, or errors). This is where you will find validation errors on your models for example.
			}

			Section Structure diagrams {				@M
					@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#StructuralDiagrams"
					 
				M@

				The structural diagrams are used to describe the structure of a software system.

				Section Class diagram {					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#ClassDiagrams"
						 
					M@

					The class diagram is used to describe the structure of the system by showing the classes, the interfaces, their attributes, their operations and their relationships.

					Section Manage types {
						It is possible to create and delete types in the class diagram.
						The available types in the Class diagram are :

						* Class
						* Enumeration
						* Interface
						* Datatype
						* Primitive type
						

						

						Section Create a type {
							It is possible to create a type by selecting the type creation tool from the palette and then clicking on the diagram or an element. A diagram is associated to a package and in this case the element is created under the corresponding package in the UML model.

							Section Create a class {								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAClass"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='Class']"
									 
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/createAType/CreateAClass.java#//@methods[name='createAClass()']"
									 
								M@
							}

							Section Create an enumeration {								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAnEnumeration"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='DataTypes']/@tools.0"
									 
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/createAType/CreateAnEnumeration.java#//@methods[name='createAnEnumeration()']"
									 
								M@
							}

							Section Create an interface {								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAnInterface"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='Interface']"
									 
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/createAType/CreateAnInterface.java#//@methods[name='createAnInterface()']"
									 
								M@
							}

							Section Create a datatype {								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateADatatype"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='DataTypes']/@tools.2"
									 
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/createAType/CreateADatatype.java#//@methods[name='createADatatype()']"
									 
								M@
							}

							Section Create a primitive type {								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='DataTypes']/@tools.1"
									 
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/createAType/CreateAPrimitiveType.java#//@methods[name='createAPrimitiveType()']"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAPrimitiveType"
									 
								M@
							}

							Section Create a package {								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='Package']"
									 
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/createAType/CreateAPackage.java#//@methods[name='createAPackage()']"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAPackage"
									 
								M@
							}

							Section Create a class under a visible package {
								In this case the user selects a visible package on the diagram as container for the new class.
								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAClassUnderAVisiblePackage"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='Class']"
									 
								M@
							}
						}

						Section Delete a type {
							It is possible to delete a semantic element : 

							* from the class diagram by using : 
							** Ctrl+D on keyboard, 
							** the context menu action 'Delete from model', 
							** the toolbar action 'Delete from model'; 
							* from the model explorer by using : 
							** the context menu action 'Delete'
							

							

							Section Delete a class {								@M
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageTypes/deleteAType/DeleteAClass.java#//@methods[name='deleteAClass()']"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#DeleteAClass"
									 
								M@
							}
						}
					}

					Section Manage features {
						Section Create a feature {
							Section Create a property {								@M
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/structuralDiagrams/classDiagrams/manageFeatures/createAFeature/CreateAProperty.java#/"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@containerMappings[name='CD_ReusedMappingForFeatures']/@subNodeMappings[name='CD_Property']"
									 
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAProperty"
									 
								M@
							}

							Section Create a typed property {							}

							Section Create an operation {							}

							Section Create a literal {							}
						}

						Section Delete feature {
							Section Delete a property {							}
						}
					}

					Section Manage relationships {
						Section Create a relationship {
							Section Create an association {							}

							Section Create a reference {							}

							Section Create a composition {							}

							Section Create an aggregation {							}

							Section Create an association class {							}

							Section Create a generalization {							}

							Section Create an interface realization {							}

							Section Create a dependency {							}

							Section Create a usage {							}

							Section Create a nest classifier {							}
						}

						Section Delete a relationship {
							Section Delete an association {							}
						}
					}

					Section Manage existing elements {
						Section Add an existing element {							@M
								@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#AddAnExistingElement"
								 
							M@

							Section Add an existing element from current package {
								Section Add an existing element using the palette tool {
									In the palette, an _Existing elements_ section contains a _Add_ tool.
									When this tool is selected a wizard will propose all the existing elements in the model which could be visible on the class diagram.
									@M
										@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='CD_AddExistingElements']"
										 
									M@

									Section Add a class {										@M
											@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#AddAClassFromCurrentPackage"
											 
											@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='CD_AddExistingElements']/@initialOperation/@firstModelOperations/@subModelOperations.0/@subModelOperations.0"
											 
										M@
									}

									Section Add an enumeration {										@M
											@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#AddAnEnumerationFromCurrentPackage"
											 
											@ref "platform:/resource/org.obeonetwork.dsl.uml2.design/description/uml2.odesign#//@ownedViewpoints[name='UML%20Structural%20Modeling']/@ownedRepresentations[name='Class%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='CD_AddExistingElements']/@initialOperation/@firstModelOperations/@subModelOperations.0/@subModelOperations.2"
											 
										M@
									}

									Section Add an interface {									}

									Section Add a datatype {									}

									Section Add a primitive type {									}

									Section Add a package {									}
								}

								Section Drag & drop an element from the Model Explorer {
									In the model explorer, an element can be selected and then dropped in the opened class diagram.

									Section Drag & drop a class {										@M
											@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#DragAndDropAClassFromTheModelExplorer"
											 
										M@
									}

									Section Drag & drop an enumeration {									}

									Section Drag & drop an interface {									}

									Section Drag & drop a datatype {									}

									Section Drag & drop a primitive type {									}

									Section Drag & drop a package {									}
								}
							}

							Section Add an existing element from another package {
								The user can see that an element is not coming from the current package :

									* the element border is lighter than the element border of elements defined in the current package
									* a tooltip shows the container package of the element if the element is not contained by the current package

								Section Add a class {								}

								Section Add an enumeration {								}

								Section Add an interface {								}

								Section Add a datatype {								}

								Section Add a primitive type {								}

								Section Add a package {								}
							}
						}

						Section Remove an existing element {
							It is possible to remove an existing element from a diagram. In this case the element is only deleted from the representation but it is not removed from the UML model. This _Remove_ tool exists in the _Existing elements_ section in the palette.

							Section Remove a class {							}
						}
					}

					Section Add related elements {
						Section From a class {						}

						Section From an interface {						}

						Section From an enumeration {						}

						Section From a package {						}

						Section From a datatype {						}

						Section From a primitive type {						}

						Section From a class diagram {						}
					}

					Section Edit elements {
						Section Edit relationships {						}

						Section Edit features {						}
					}
				}

				Section Component diagram {
					The component diagram is used to describe the structure of the system by showing the components and their connectors.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#ComponentDiagrams"
						 
					M@
				}

				Section Composite structure diagram {
					The composite structure diagram is used to describe the structure of the system by showing the internal structure of classes and the interfaces they used to collaborate.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CompositeStructureDiagrams"
						 
					M@
				}

				Section Deployment diagram {
					The deployment diagram is used to describe the structure of the system by showing the physical deployment of artifacts on nodes.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#DeploymentDiagrams"
						 
					M@
				}

				Section Package diagram {
					The package diagram is used to describe the structure of the system by showing the packages and their dependencies.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#PackageDiagrams"
						 
					M@
				}

				Section Object diagram {
					The object diagram is used to describe the structure of the system by showing the objects at a specific time.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#ObjectDiagrams"
						 
					M@
				}

				Section Profile diagram {
					The profile diagram operates at the metamodel level to provide new stereotypes and profiles.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#ProfileDiagrams"
						 
					M@
				}
			}

			Section Behavior diagrams {
				The behavioral diagrams are used to describe what happen in the software system.
				@M
					@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#BehavioralDiagrams"
					 
				M@

				Section Activity diagram {
					The activity diagram is used to represent workflows of stepwise activities.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#ActivityDiagrams"
						 
					M@
				}

				Section Statemachine diagram {
					The statemachine diagram is used to represent the different states and transitions of a system.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#StatemachineDiagrams"
						 
					M@
				}

				Section Use case diagram {
					The use case diagram is used to describe the interaction of the user with a system.
					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#UseCaseDiagrams"
						 
					M@
				}
			}

			Section Common features {				@M
					@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#Common"
					 
				M@

				The behavioral diagrams are used to describe what happen in the software system.

				Section Manage diagrams {					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#ManageDiagrams"
						 
					M@

					It is possible to create and delete the diagrams.

					Section Create a diagram {						@M
							@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateADiagram"
							 
						M@

						Section Create a diagram from a selected element {
							It is possible to create easily from a selected element a new representation.

							_Create new representation_ action is available according to the following cross table :

							
							
							|_. Mapping\Diagram      |_. Class |_. Component |_. Composite Structure |_. Deployment |_. Package |_. Object |_. Activity |_. Statemachine |_. Use Case |
							|_. Class              |x        |x            |x                      |x             |x      |x         |x          |x              |x       |
							|_. Operation          |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
							|_. Component          |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
							|_. Interface           |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
							|_. Artifact            |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
							|_. Package         |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
							|_. Object              |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
							|_. Activity            |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
							|_. Statemachine        |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
							|_. Use Case           |x    |x      |x                 |x         |x  |x     |x      |x         |x   |

							Example : When a _Class_ is selected in a diagram, it is possible to create other kinds of diagrams:

							* another Class diagram
							* a Component diagram
							* a Composite structure diagram
							* an Activity diagram
							* a Statemachine diagram
							

							

							Section Create a class diagram from a package {								@M
									@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#CreateAClassDiagramFromAPackage"
									 
								M@
								@M
									@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/ui/common/manageDiagrams/createADiagram/CreateAClassDiagramFromAPackage.java#//@methods[name='createAClassDiagramFromAPackage()']"
									 
								M@
							}
						}

						Section Create a diagram by selecting its kind {
							It is possible to create a new diagram by selecting its kind (Class diagram, Use case diagram...).
						}
					}

					Section Delete a diagram {						@M
							@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#DeleteADiagram"
							 
						M@

						Section Delete a class diagram from the modele explorer {							@M
								@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#DeleteAClassDiagramFromModelExplorer"
								 
							M@
						}
					}
				}

				Section Edit elements {					@M
						@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#EditElements"
						 
					M@

					Section Edit labels {						@M
							@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#EditLabels"
							 
						M@

						Section Edit association role {							@M
								@ref "org.obeonetwork.dsl.uml2.tests/src/org/obeonetwork/dsl/uml2/test/unit/common/editElements/editLabels/EditAssociationRole.java#//@methods[name='editAssociationRole()']"
								 
								@ref "platform:/resource/org.obeonetwork.dsl.uml2.doc.specification/model/umlDesigner.specification#EditAssociationRole"
								 
							M@
						}
					}
				}

				Section Navigate between representations {
					It is possible to navigate easily from a representation to another representation.

					_Open_ action is available according to the following cross table :

					
					
					|_. Mapping\Diagram      |_. Class |_. Component |_. Composite Structure |_. Deployment |_. Package |_. Object |_. Activity |_. Statemachine |_. Use Case |
					|_. Class              |x        |x            |x                      |x             |x      |x         |x          |x              |x       |
					|_. Operation          |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
					|_. Component          |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
					|_. Interface           |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
					|_. Artifact            |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
					|_. Package         |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
					|_. Object              |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
					|_. Activity            |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
					|_. Statemachine        |x    |x      |x                 |x         |x  |x     |x      |x         |x   |
					|_. Use Case           |x    |x      |x                 |x         |x  |x     |x      |x         |x   |

					Example : When a _Class_ is selected in a diagram, it is possible to navigate to other kinds of diagrams:

					* Another Class diagram
					* Component diagram
					* Composite structure diagram
					* Activity diagram
					* Statemachine diagram
					

					
				}
			}

			Section Help {
				Welcome page :

				* Eclipse integration :
				* Product ntegration :
				

				Help contents :

				* 	User guide
				* 	Cheatsheets
				

				Dynamic help:

				* on class diagram opening
				

				
			}
		}

		Section Non-Goals {
			The UML Designer does not support the following diagrams:

			* Timing Diagram
			* Communication Diagram
			* Interaction Overview Diagram
			

			
		}

		Section Related Business Processes {
			Does the software implement a given business process ? How does it
			integrates with other business processes.
		}
	}
	Chapter Non-functional {
		The following non-functional requirements are defined :

		* *Usability* : 
		** User friendly interfaces : The UML Designer is easy to use and to get started with. The different interfaces are intuitive and learnable.
		** Documentation : User guide and other supporting materials (tutorials, video, cheatsheets) are available to help the user.
		* *Licensing* : The UML Designer is provided as an open source project under EPL licence.
		* *Response time* : The response time perceived by the end user must be good and when the processing would be longer the user must be informed.
		

		
	}
	Chapter Technical {
		Section Architecture {
			Section Constraints {
				UML Designer must be based on :

				* Obeo Designer, 
				* "UML2":http://git.eclipse.org/c/uml2/org.eclipse.uml2.git which is the EMF-implementation of the UML2.x metamodel for the Eclipse platform.
				

				
			}

			Section Principles {
				Obeo Designer "best practices":

				What principles do you want to adopt ?

				Example principles include; architectural layering, use of frameworks
				and libraries, common design patterns and templates for
				building components and common approaches (e.g. error handling,
				logging, etc)
			}

			Section Logical {
				This section purpose is to describe your software big picture.

				Typically, you should document here major components, 
				interfaces or models.
			}

			Section Key Internal Interfaces {
				Synchronous or asynchronous, who has the ownership of the interfaces?
			}

			Section Key External Interfaces {
				Synchronous or asynchronous, who has the ownership of the interfaces?

				Is the interface always available or do you (e.g.) need to cache data
				locally?
			}

			Section Evolutions and Versioning {
				The UML Designer version is a 3 digits number : x.y.z.

				As UML Designer is based on Obeo Designer the release cycle is based on the Obeo Designer one.
				Each time a new main version of Obeo Designer is released, the UML Designer version is incremented.

				One main version is released every 2-3 months to provide new features and minor versions for bug fixes are released when it is needed.

				The roadmap is available on the "obeo network":http://marketplace.obeonetwork.com/module/uml#release-notes.
			}
		}

		Section Design Guidelines {
			Section {			}
		}

		Section Operational {
			Section {			}
		}

		Section Architecture Justification {
			Section {			}
		}
	}
}
