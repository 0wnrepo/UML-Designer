
__(c) Obeo 2011 -  All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0__

@Authors@ Gonzague Reydet / CÃ©dric Brun / Yvan Lussaud
@Contact@ cedric.brun@obeo.fr / yvan.lussaud@obeo.fr



h1. Providing Feedback

This UML modeling environment is based on the "Obeo Designer":http://www.obeodesigner.com product. It is under an
Open Source license (*EPL*) and the source code is hosted on "github":https://github.com/ObeoNetwork/UML-Modeling. 

It is intended to cover most use cases behind the usage of UML, and more importantly to be reused when you apply a 
model driven approach wich uses both *UML and some DSL*. Everything should integrate seamlessly  in the same environment. 

We're constantly looking for feedback about this modeler, if you think something is missing, some behavior is weird or even just to tell us you are happy with it in its current state, *please come and exchange* on the "Obeo Network":http://www.obeonetwork.com/group/uml-designer

Feel free to fork the code, adapt it for your need and trigger a "pull request":https://help.github.com/articles/using-pull-requests.


h1. Getting Started

This section describes how to start using the UML designer either from existing UML models or by creating a new one.

h2. Starting from the Travel Agency example

Import the TravelAgency project using the menu @File/New/Example...@.

!gettingStarted/example-1-menu.png!

Pick the *Travel Agency UML* wizard and click on @Next@ and then @Finish@.

!gettingStarted/example-2-wizard.png!

Click Finish on the wizard and a *TravelAgency* project appears in your workspace. 

!gettingStarted/example-3-workspace.png!

When the project gets opened,  you will be greeted with the main package hierarchy diagram.

!gettingStarted/example-4-maindiag.png!

From here you can navigate to existing diagrams by right clicking on the *Model*.


h2. Create a new UML model & UML project

To create a new UML project , enable the Modeling Perspective.

!gettingStarted/perspective.png!

Then click on the wizard shortcuts at the top-right of the Eclipse Workbench. Select  __New UML Project.__ 

!gettingStarted/newUMLModel.png!

You can choose specific name for the project and the root element for the project on the next pages.

!gettingStarted/newUMLProject.png!

When you press the __Finish__ button, the projects gets created and automatically enabled the UML viewpoints.

!gettingStarted/new-workspace.png!

Now you can right click on the displayed package to create all the available diagrams or use the palette to create the package structure that fits to your needs. You can also open the Package hierarchy diagram and starts from here:

!gettingStarted/new-maindiag.png!


h2. Display & edit an existing UML model

To create a new UML design on existing UML models, simply drag & drop the models in the Project or use the __Add Model__ action available on the __Project Dependencies__ item.

!gettingStarted/new-add-dependency.png!

h2(#vpselection). UML designer viewpoints

Two viewpoints are specified on the UML designer each bringing the following views:
* UML Structural modeling
** Package hierarchy diagram
** Class diagram
** Component diagram
** Object diagram
** Composite diagram
** Deployment diagram
* UML Behavioral modeling
** State machine diagram
** Activity diagram
** Use case diagram
** Sequence diagram

You can select either viewpoints or both depending on your use case. Note that the __Package hierarchy diagram__ is the entry point to create new diagrams such as Activity or Sequence diagrams. So it is advised to select at least the __UML Structural modeling__ viewpoint.

h1. Using the Package Hierarchy Diagram

The @Package Hierarchy@ diagram is the starting point of your modeling task. It shows you 
the structure of your model (packages and sub-packages) and enable the creation of the other diagrams.
 

h2. Creating a Class Diagram

To create a class diagram you should *right-click* on your model or on a package and pick @navigate@ and then @new Class Diagram@.

!using_package_hierarchy/create_classdiag.png!

h2. Creating a Deployment Diagram

To create a deployment diagram you should *right-click* on your model or on a package and pick @navigate@ and then @new Deployment Diagram@.

h1. Using the Class Diagram

h2. Creating Elements

All the elements you can create in a class diagram are available through the *palette*.

!using_class_diagram/palette.png!

You also have the ability to create elements in a contextual way related to the currently selected elements.
If your pointer is on the diagram background, after a few seconds you should see the following assistant :

!using_class_diagram/assistant.png!

If your pointer is *on a class* the assistant will be : 

!using_class_diagram/assistant_class.png!

h2. Editing Elements

The generic way to edit element values is using the *properties view*. If it is not opened yet
you can open it clicking on the *Window* menu, then *Show View*  and then *Properties*

!using_class_diagram/properties.png! 

To edit a property you should then enable the *Semantic* tab :

!using_class_diagram/properties_values.png!


h2. Editing Attributes

We added a few accelerators so that you can quickly edit *Attributes* in a class just by typing the label. Typing : 
* @aNewName@ will update the attribute name.
* @aNewName : SomeType@ will update the attribute name and will look for the *datatype* with the given name. If found it will 
* @/someName@ will set the Attribute as *derived*.
* @=someValue@ will set the *default value* of the Attribute. 
* @[0..1]@ will set the *multiplicity* of the attribute to 0 for the lower bound and 1 for the upper bound.
* @[0..*]@ will set the *multiplicity* of the attribute to 0 for the lower bound and unbounded for the upper bound.

h1. Using the Deployment Diagram

h2. Creating Elements

All the elements you can create in a deployment diagram are available through the *palette*.

!using_deployment_diagram/palette.png!

You also have the ability to create elements in a contextual way related to the currently selected elements.
If your pointer is on the diagram background, after a few seconds you should see the following assistant :

!using_deployment_diagram/assistant.png!

If your pointer is *on a node* the assistant will be : 

!using_deployment_diagram/assistant_node.png!

In deed, a node is a composite element.

h2. Editing labels

We added a few accelerators so that you can quickly edit *labels* on elements or edges just by typing. Typing : 
* @aNewName@ will update the label.

h1. Features

h2. Class Diagram

h3. Introduction

!features/agency_pics/entities.jpg!

h3. Support for Broken Associations

It might happen that for some reason you have an *Association* instance in your package which doesn't have the proper *ends*. In that case
the class diagram will show the broken associations as nodes :

!features/class_pics/broken associations Class Diagram.jpg!

You can use the *Association* tools in the palette __(Association, Reference, Composition and Aggregation)__ to re-attach the Association to a classifier.


h3. Classes in SubComponents

A *Class Diagram* created on a Package or a Model will display the contained classes but also the classes which are contained in Components of the selected Package.

Thanks to this one can easily define a *Class Diagram* displaying all the entities abstracting the fact that they might be split across components.

h2. Component Diagram

h3. Introduction

!features/agency_pics/system architecture.jpg!

h3. Connector

You can link two ports using assembly or delegation connectors.

Assembly Connector :

!features/component_pics/assembly connector.jpg!

Delegation Connector :

!features/component_pics/delegation connector.jpg!

h3. Composite Components

!features/component_pics/composite components.jpg!

h3. Using Class

As a component :

!features/component_pics/class as component.jpg!

In a component :

!features/component_pics/implementation classes in component.jpg!


h3. Required and Provided Interfaces

Using ports :

!features/component_pics/exchange through ports.jpg!

Or directy on the components :

!features/component_pics/exchange through component.jpg!

h3. Package imports

!features/component_pics/package imports.jpg!


h2. Use Case Diagram

h3. Introduction

!features/agency_pics/system use cases.jpg!

h3. Use cases with or without subjects

The *Use Case Diagram* will display any @UseCase@ not being affected to a subject on the canvas. If a subject is affected, then the use case
will be displayed directly within this subject.

Dragging a use case from a subject to the canvas (and the other way around) will set or unset the subject accordingly.


h2. Activity Diagram

h3. Introduction

!features/agency_pics/to reserve a trip.jpg!

h2. State Machine Diagram

h3. Introduction

!features/agency_pics/state_machine.png!

h2. Sequence Diagram

!features/agency_pics/sequence.png!

h2. Deployment Diagram

h3. Introduction

!features/agency_pics/deployment.png!

h3. Artifact dependency and generalization

!features/deployment_pics/artifact_dependency_generalization.png!

h3. Artifact manifestation of packageable elements

!features/deployment_pics/artifact_manifestation_component_package.png!

h3. Artifact deployment

!features/deployment_pics/artifact_deployment.png!
We have two way to deploy an artifact:
* Deployment could be shown as a deploy dependency that is drawn from the artifact to the deployment target.
* Deployment could also be shown with deployed artifacts contained by a deployment target.

h3. Device, Execution Environment, Node and links.

!features/deployment_pics/links_between_nodes.png!

h3. Composite Nodes

!features/deployment_pics/composition.png!
