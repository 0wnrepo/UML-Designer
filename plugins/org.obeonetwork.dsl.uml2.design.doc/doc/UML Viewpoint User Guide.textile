
__(c) Obeo 2011 -  All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0__

@Authors@ Gonzague Reydet / CÃ©dric Brun / Yvan Lussaud
@Contact@ cedric.brun@obeo.fr / yvan.lussaud@obeo.fr

h1. Getting Started

This section describes how to start using the UML designer either from existing UML models or by creating a new one.

h2. Starting from the Travel Agency example

Import the TravelAgency project using the menu @File/New/Example...@.

!gettingStarted/example-1-menu.png!

Pick the *Travel Agency UML* wizard and click on @Next@ and then @Finish@.

!gettingStarted/example-2-wizard.png!

Click Finish on the wizard and a *TravelAgency* project appears in your workspace. 

!gettingStarted/example-3-workspace.png!

Double-click on the *agency.aird* file (or right click and @Open Session@), you will be greeted with the main package hierarchy diagram.

!gettingStarted/example-4-maindiag.png!

From here you can navigate to existing diagrams by right clicking on the *Model*.


h2. Create a new UML model & session file

To create a new UML model and an associated designer session, open the wizard through the menu __File > New > Other...__ and select the __UML Model__ item through the category __Viewpoint > Modeler__.

!gettingStarted/NewUMLModel.PNG!

You can choose specific name and location for the UML & designer session files on the next wizard pages. When you press the __Finish__ button, the <a href="#vpselection">viewpoint selection</a> dialog shows up.
Once the __UML Structural viewpoint__ is selected, a new editor opens on the root package hierarchy diagram showing only the root package.

Now you can right click on the displayed package to create all the available diagrams or use the palette to create the package structure that fits to your needs.

h2. Display & edit an existing UML model

To create a new UML design on existing UML models, simply drag & drop the root UML model to handle into the __Model Content__ view.
Then a wizard will show up asking you to create a new session. Follow the step upon the <a href="#vpselection">viewpoint selection</a> dialog.
Once the __UML Structural viewpoint__ is selected, a new editor opens on the root package hierarchy diagram showing the existing package structure of your model.

h2(#vpselection). UML designer viewpoints

Two viewpoints are specified on the UML designer each bringing the following views:
* UML Structural modeling
** Package hierarchy diagram
** Class diagram
** Component diagram
** Object diagram
** Composite diagram
** Related classes diagram
* UML Behavioral modeling
** State machine diagram
** Activity diagram
** Use case diagram
** Sequence diagram

!gettingStarted/UMLViewpointSelection.PNG!

You can select either viewpoints or both depending on your use case. Note that the __Package hierarchy diagram__ is the entry point to create new diagrams such as Activity or Sequence diagrams. So it is advised to select at least the __UML Structural modeling__ viewpoint.

h1. Features

h2. Class Diagram

h3. Introduction

!features/agency_pics/entities.JPG!

h3. Support for Broken Associations

It might happen that for some reason you have an *Association* instance in your package which doesn't have the proper *ends*. In that case
the class diagram will show the broken associations as nodes :

!features/class_pics/broken associations.JPG!

You can use the *Association* tools in the palette __(Association, Reference, Composition and Aggregation)__ to re-attach the Association to a classifier.

h3. Related Classes/Interface filtering and highlighting

You have two ways to highlight classes related to one given class. The first one is to activate the *Related filter* on the *Class Diagram*. It will hide elements (*Class*, *interface*, *Association*, ...) that are not related to the class you selected (context). The second way can be achive by using the *Related Classes Diagram*. This diagram will show all elements related to the selected class.

Lets use an instance to visualize the result of each methods. Consider the following model :

!features/class_pics/related classes/Related_classes_package.JPG!

By opening the *Class Diagram* on package1 you get the following diagram :

!features/class_pics/related classes/package_1_not_filtered.JPG!

You can then apply the filter on ContextClass :

!features/class_pics/related classes/activate_filter_on_ContextClass.JPG!

The resulting diagram will be as follow :

!features/class_pics/related classes/package_1_filtered_on_ContextClass.JPG!

Notice that only classes present in the initial diagram are present. If you want all classes related to ContextClass you should open the *Related Classes Diagram* on the ContextClass :

!features/class_pics/related classes/ContextClass_related_classes.JPG!

h3. Classes in SubComponents

A *Class Diagram* created on a Package or a Model will display the contained classes but also the classes which are contained in Components of the selected Package.

Thanks to this one can easily define a *Class Diagram* displaying all the entities abstracting the fact that they might be split across components.

h2. Component Diagram

h3. Introduction

!features/agency_pics/system architecture.JPG!

h3. Connector

You can link two ports using assembly or delegation connectors.

Assembly Connector :

!features/component_pics/assembly connector.JPG!

Delegation Connector :

!features/component_pics/delegation connector.JPG!

h3. Composite Components

!features/component_pics/composite components.JPG!

h3. Using Class

As a component :

!features/component_pics/class as component.JPG!

In a component :

!features/component_pics/implementation classes in component.JPG!


h3. Required and Provided Interfaces

Using ports :

!features/component_pics/exchange through ports.JPG!

Or directy on the components :

!features/component_pics/exchange through component.JPG!

h3. Package imports

!features/component_pics/package imports.JPG!


h2. Use Case Diagram

h3. Introduction

!features/agency_pics/system use cases.JPG!

h3. Use cases with or without subjects

The *Use Case Diagram* will display any @UseCase@ not being affected to a subject on the canvas. If a subject is affected, then the use case
will be displayed directly within this subject.

Dragging a use case from a subject to the canvas (and the other way around) will set or unset the subject accordingly.


h2. Activity Diagram

h3. Introduction

!features/agency_pics/to reserve a trip.JPG!

h2. State Machine Diagram

h3. Introduction

!features/agency_pics/reservation states.JPG!

h2. Sequence Diagram

